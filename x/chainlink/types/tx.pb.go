// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chainlink/v1beta/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgModuleOwnershipTransfer is the type defined for module ownership transfer
type MsgModuleOwnershipTransfer struct {
	// current module owner address
	AssignerAddress       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=assignerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"assignerAddress,omitempty"`
	NewModuleOwnerAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=newModuleOwnerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"newModuleOwnerAddress,omitempty"`
	NewModuleOwnerPubKey  []byte                                        `protobuf:"bytes,3,opt,name=newModuleOwnerPubKey,proto3" json:"newModuleOwnerPubKey,omitempty" yaml:"pub_key"`
}

func (m *MsgModuleOwnershipTransfer) Reset()         { *m = MsgModuleOwnershipTransfer{} }
func (m *MsgModuleOwnershipTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgModuleOwnershipTransfer) ProtoMessage()    {}
func (*MsgModuleOwnershipTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e2cf97733d10959, []int{0}
}
func (m *MsgModuleOwnershipTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModuleOwnershipTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModuleOwnershipTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModuleOwnershipTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModuleOwnershipTransfer.Merge(m, src)
}
func (m *MsgModuleOwnershipTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgModuleOwnershipTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModuleOwnershipTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModuleOwnershipTransfer proto.InternalMessageInfo

func (m *MsgModuleOwnershipTransfer) GetAssignerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.AssignerAddress
	}
	return nil
}

func (m *MsgModuleOwnershipTransfer) GetNewModuleOwnerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.NewModuleOwnerAddress
	}
	return nil
}

func (m *MsgModuleOwnershipTransfer) GetNewModuleOwnerPubKey() []byte {
	if m != nil {
		return m.NewModuleOwnerPubKey
	}
	return nil
}

// MsgFeed is the type defined for each new feed
type MsgFeed struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// FeedOwner is the owner of the feed
	FeedOwner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=feedOwner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"feedOwner,omitempty"`
	// DataProviders is the init list of data provider of the feed
	DataProviders []*DataProvider `protobuf:"bytes,3,rep,name=dataProviders,proto3" json:"dataProviders,omitempty"`
	// The number of signatures required for a feedData submission to be valid
	SubmissionCount uint32 `protobuf:"varint,4,opt,name=submissionCount,proto3" json:"submissionCount,omitempty"`
	// The interval between which a new round should automatically be triggered.
	// The given value in milliseconds will only be approximate within block intervals
	HeartbeatTrigger uint32 `protobuf:"varint,5,opt,name=heartbeatTrigger,proto3" json:"heartbeatTrigger,omitempty"`
	// The fraction of deviation in the feed data required to trigger a new round.
	// For example if the price of ATOM/USD changes by 1% then a new round should occur
	// even if the heartbeat interval has not elapsed.
	DeviationThresholdTrigger uint32 `protobuf:"varint,6,opt,name=deviationThresholdTrigger,proto3" json:"deviationThresholdTrigger,omitempty"`
	// module owner who signs the add feed tx
	ModuleOwnerAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=moduleOwnerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"moduleOwnerAddress,omitempty"`
}

func (m *MsgFeed) Reset()         { *m = MsgFeed{} }
func (m *MsgFeed) String() string { return proto.CompactTextString(m) }
func (*MsgFeed) ProtoMessage()    {}
func (*MsgFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e2cf97733d10959, []int{1}
}
func (m *MsgFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeed.Merge(m, src)
}
func (m *MsgFeed) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeed proto.InternalMessageInfo

func (m *MsgFeed) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgFeed) GetFeedOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.FeedOwner
	}
	return nil
}

func (m *MsgFeed) GetDataProviders() []*DataProvider {
	if m != nil {
		return m.DataProviders
	}
	return nil
}

func (m *MsgFeed) GetSubmissionCount() uint32 {
	if m != nil {
		return m.SubmissionCount
	}
	return 0
}

func (m *MsgFeed) GetHeartbeatTrigger() uint32 {
	if m != nil {
		return m.HeartbeatTrigger
	}
	return 0
}

func (m *MsgFeed) GetDeviationThresholdTrigger() uint32 {
	if m != nil {
		return m.DeviationThresholdTrigger
	}
	return 0
}

func (m *MsgFeed) GetModuleOwnerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ModuleOwnerAddress
	}
	return nil
}

// DataProvider is the type defined for feed data provider
type DataProvider struct {
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	PubKey  []byte                                        `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *DataProvider) Reset()         { *m = DataProvider{} }
func (m *DataProvider) String() string { return proto.CompactTextString(m) }
func (*DataProvider) ProtoMessage()    {}
func (*DataProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e2cf97733d10959, []int{2}
}
func (m *DataProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataProvider.Merge(m, src)
}
func (m *DataProvider) XXX_Size() int {
	return m.Size()
}
func (m *DataProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_DataProvider.DiscardUnknown(m)
}

var xxx_messageInfo_DataProvider proto.InternalMessageInfo

func (m *DataProvider) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *DataProvider) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

// MsgFeedData is the type defined for the data of the feed
// It could be an OCR report feed, or any general feed data in the future
type MsgFeedData struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// Submitter is the leader of the current round who is calling the module to submit feed data
	Submitter github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=submitter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"submitter,omitempty"`
	// FeedData is the report for price feed, could be used for general feed data
	// From proposal: The reports generated by Chainlink nodes off-chain using the OCR protocol are ABI encoded byte arrays
	// which means each report is a byte array which could be deserialized to OCRAbiEncoded type
	FeedData []byte `protobuf:"bytes,3,opt,name=feedData,proto3" json:"feedData,omitempty"`
	// Signatures is the data provider signature list of the current round
	Signatures [][]byte `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *MsgFeedData) Reset()         { *m = MsgFeedData{} }
func (m *MsgFeedData) String() string { return proto.CompactTextString(m) }
func (*MsgFeedData) ProtoMessage()    {}
func (*MsgFeedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e2cf97733d10959, []int{3}
}
func (m *MsgFeedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeedData.Merge(m, src)
}
func (m *MsgFeedData) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeedData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeedData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeedData proto.InternalMessageInfo

func (m *MsgFeedData) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgFeedData) GetSubmitter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Submitter
	}
	return nil
}

func (m *MsgFeedData) GetFeedData() []byte {
	if m != nil {
		return m.FeedData
	}
	return nil
}

func (m *MsgFeedData) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type MsgResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	TxHash string `protobuf:"bytes,2,opt,name=txHash,proto3" json:"txHash,omitempty"`
}

func (m *MsgResponse) Reset()         { *m = MsgResponse{} }
func (m *MsgResponse) String() string { return proto.CompactTextString(m) }
func (*MsgResponse) ProtoMessage()    {}
func (*MsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e2cf97733d10959, []int{4}
}
func (m *MsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResponse.Merge(m, src)
}
func (m *MsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResponse proto.InternalMessageInfo

func (m *MsgResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgResponse) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// this will be the implementation used later will use pseudo OCR ABI encoded data instead
// because the structure of how the OCR will be generalized is still unknown
// OCRAbiEncoded implments the OCR data that is ABCI encoded. The use and form will conform to the
// Chainlink protocol specification.
type OCRAbiEncoded struct {
	// Context should be a 32-byte array struct.
	Context []byte `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	// Oracles should be a 32-byte record of all participating oracles. Assuming this is data provider address?
	Oracles []byte `protobuf:"bytes,2,opt,name=Oracles,proto3" json:"Oracles,omitempty"`
	// Observations should be an array on int192 containing the providers' independent observations.
	Observations []*Observation `protobuf:"bytes,3,rep,name=Observations,proto3" json:"Observations,omitempty"`
}

func (m *OCRAbiEncoded) Reset()         { *m = OCRAbiEncoded{} }
func (m *OCRAbiEncoded) String() string { return proto.CompactTextString(m) }
func (*OCRAbiEncoded) ProtoMessage()    {}
func (*OCRAbiEncoded) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e2cf97733d10959, []int{5}
}
func (m *OCRAbiEncoded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OCRAbiEncoded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OCRAbiEncoded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OCRAbiEncoded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCRAbiEncoded.Merge(m, src)
}
func (m *OCRAbiEncoded) XXX_Size() int {
	return m.Size()
}
func (m *OCRAbiEncoded) XXX_DiscardUnknown() {
	xxx_messageInfo_OCRAbiEncoded.DiscardUnknown(m)
}

var xxx_messageInfo_OCRAbiEncoded proto.InternalMessageInfo

func (m *OCRAbiEncoded) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *OCRAbiEncoded) GetOracles() []byte {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func (m *OCRAbiEncoded) GetObservations() []*Observation {
	if m != nil {
		return m.Observations
	}
	return nil
}

type Observation struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Observation) Reset()         { *m = Observation{} }
func (m *Observation) String() string { return proto.CompactTextString(m) }
func (*Observation) ProtoMessage()    {}
func (*Observation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e2cf97733d10959, []int{6}
}
func (m *Observation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Observation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Observation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Observation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Observation.Merge(m, src)
}
func (m *Observation) XXX_Size() int {
	return m.Size()
}
func (m *Observation) XXX_DiscardUnknown() {
	xxx_messageInfo_Observation.DiscardUnknown(m)
}

var xxx_messageInfo_Observation proto.InternalMessageInfo

func (m *Observation) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// OCRFeedDataInStore defines the type for OCR report that persists into the store
type OCRFeedDataInStore struct {
	FeedData              *MsgFeedData   `protobuf:"bytes,1,opt,name=feedData,proto3" json:"feedData,omitempty"`
	DeserializedOCRReport *OCRAbiEncoded `protobuf:"bytes,2,opt,name=deserializedOCRReport,proto3" json:"deserializedOCRReport,omitempty"`
	RoundId               uint64         `protobuf:"varint,3,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
}

func (m *OCRFeedDataInStore) Reset()         { *m = OCRFeedDataInStore{} }
func (m *OCRFeedDataInStore) String() string { return proto.CompactTextString(m) }
func (*OCRFeedDataInStore) ProtoMessage()    {}
func (*OCRFeedDataInStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e2cf97733d10959, []int{7}
}
func (m *OCRFeedDataInStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OCRFeedDataInStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OCRFeedDataInStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OCRFeedDataInStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCRFeedDataInStore.Merge(m, src)
}
func (m *OCRFeedDataInStore) XXX_Size() int {
	return m.Size()
}
func (m *OCRFeedDataInStore) XXX_DiscardUnknown() {
	xxx_messageInfo_OCRFeedDataInStore.DiscardUnknown(m)
}

var xxx_messageInfo_OCRFeedDataInStore proto.InternalMessageInfo

func (m *OCRFeedDataInStore) GetFeedData() *MsgFeedData {
	if m != nil {
		return m.FeedData
	}
	return nil
}

func (m *OCRFeedDataInStore) GetDeserializedOCRReport() *OCRAbiEncoded {
	if m != nil {
		return m.DeserializedOCRReport
	}
	return nil
}

func (m *OCRFeedDataInStore) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgModuleOwnershipTransfer)(nil), "chainlink.v1beta.MsgModuleOwnershipTransfer")
	proto.RegisterType((*MsgFeed)(nil), "chainlink.v1beta.MsgFeed")
	proto.RegisterType((*DataProvider)(nil), "chainlink.v1beta.DataProvider")
	proto.RegisterType((*MsgFeedData)(nil), "chainlink.v1beta.MsgFeedData")
	proto.RegisterType((*MsgResponse)(nil), "chainlink.v1beta.MsgResponse")
	proto.RegisterType((*OCRAbiEncoded)(nil), "chainlink.v1beta.OCRAbiEncoded")
	proto.RegisterType((*Observation)(nil), "chainlink.v1beta.Observation")
	proto.RegisterType((*OCRFeedDataInStore)(nil), "chainlink.v1beta.OCRFeedDataInStore")
}

func init() { proto.RegisterFile("chainlink/v1beta/tx.proto", fileDescriptor_8e2cf97733d10959) }

var fileDescriptor_8e2cf97733d10959 = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xc6, 0x21, 0x21, 0x13, 0x87, 0x46, 0xa3, 0xb4, 0x72, 0xac, 0xb2, 0x31, 0x7b, 0xb2,
	0x10, 0xf1, 0xaa, 0xe1, 0x80, 0x40, 0x70, 0x70, 0xdd, 0x56, 0x54, 0x55, 0xe4, 0x32, 0x31, 0x17,
	0x38, 0xa0, 0x59, 0xcf, 0xcb, 0xee, 0x28, 0xf6, 0xcc, 0x6a, 0x66, 0x36, 0xdd, 0x70, 0xe4, 0xc0,
	0x19, 0x89, 0x7f, 0xc1, 0x05, 0x89, 0x5f, 0xc0, 0x91, 0x63, 0x25, 0x2e, 0x9c, 0x2a, 0x94, 0xf0,
	0x0b, 0x38, 0xc2, 0xa5, 0x9a, 0xf1, 0x6e, 0xb2, 0x89, 0x37, 0xb5, 0x94, 0x9e, 0xbc, 0x6f, 0xde,
	0x7b, 0xdf, 0x7b, 0xf3, 0xbd, 0xef, 0x79, 0xd0, 0xce, 0x38, 0xa1, 0x5c, 0x4c, 0xb8, 0x38, 0x0e,
	0x4f, 0x1e, 0x44, 0x60, 0x68, 0x68, 0xf2, 0x5e, 0xaa, 0xa4, 0x91, 0x78, 0xeb, 0xc2, 0xd5, 0x9b,
	0xb9, 0xda, 0xdb, 0xb1, 0x8c, 0xa5, 0x73, 0x86, 0xf6, 0x6b, 0x16, 0xd7, 0xbe, 0x1f, 0x4b, 0x19,
	0x4f, 0x20, 0xa4, 0x29, 0x0f, 0xa9, 0x10, 0xd2, 0x50, 0xc3, 0xa5, 0xd0, 0x85, 0xd7, 0x9f, 0x2b,
	0x10, 0x83, 0x00, 0xcd, 0x0b, 0x7f, 0xf0, 0xcb, 0x32, 0x6a, 0x1f, 0xe8, 0xf8, 0x40, 0xb2, 0x6c,
	0x02, 0xc3, 0x17, 0x02, 0x94, 0x4e, 0x78, 0x3a, 0x52, 0x54, 0xe8, 0x23, 0x50, 0xf8, 0x5b, 0x74,
	0x87, 0x6a, 0xcd, 0x63, 0x01, 0xaa, 0xcf, 0x98, 0x02, 0xad, 0x5b, 0x5e, 0xc7, 0xeb, 0x36, 0x1f,
	0x3e, 0xf8, 0xef, 0xd5, 0xee, 0x5e, 0xcc, 0x4d, 0x92, 0x45, 0xbd, 0xb1, 0x9c, 0x86, 0x63, 0xa9,
	0xa7, 0x52, 0x17, 0x3f, 0x7b, 0x9a, 0x1d, 0x87, 0xe6, 0x34, 0x05, 0xdd, 0xeb, 0x8f, 0xc7, 0x45,
	0x22, 0xb9, 0x8e, 0x84, 0x63, 0x74, 0x57, 0xc0, 0x8b, 0x4a, 0xe9, 0xb2, 0xc4, 0xf2, 0x6d, 0x4b,
	0xd4, 0xe3, 0xe1, 0x27, 0x68, 0xfb, 0xaa, 0xe3, 0x79, 0x16, 0x3d, 0x83, 0xd3, 0x56, 0xc3, 0xd5,
	0xc1, 0xff, 0xbe, 0xda, 0x7d, 0xef, 0x94, 0x4e, 0x27, 0x9f, 0x05, 0x69, 0x16, 0x7d, 0x77, 0x0c,
	0xa7, 0x01, 0xa9, 0x8d, 0x0f, 0x7e, 0x6d, 0xa0, 0xb5, 0x03, 0x1d, 0x3f, 0x01, 0x60, 0xf8, 0x1e,
	0x5a, 0x3d, 0x02, 0x60, 0x4f, 0x99, 0x23, 0x64, 0x9d, 0x14, 0x16, 0x1e, 0xa2, 0x75, 0xfb, 0xe5,
	0xd2, 0x6e, 0x7f, 0x91, 0x4b, 0x0c, 0xfc, 0x08, 0x6d, 0x32, 0x6a, 0xe8, 0x73, 0x25, 0x4f, 0x38,
	0x03, 0xa5, 0x5b, 0x8d, 0x4e, 0xa3, 0xbb, 0xb1, 0xef, 0xf7, 0xae, 0xeb, 0xa3, 0xf7, 0xa8, 0x12,
	0x46, 0xae, 0x26, 0xe1, 0x2e, 0xba, 0xa3, 0xb3, 0x68, 0xca, 0xb5, 0xe6, 0x52, 0x0c, 0x64, 0x26,
	0x4c, 0x6b, 0xa5, 0xe3, 0x75, 0x37, 0xc9, 0xf5, 0x63, 0xfc, 0x21, 0xda, 0x4a, 0x80, 0x2a, 0x13,
	0x01, 0x35, 0x23, 0xc5, 0xe3, 0x18, 0x54, 0xeb, 0x1d, 0x17, 0x3a, 0x77, 0x8e, 0x3f, 0x47, 0x3b,
	0x0c, 0x4e, 0xb8, 0x53, 0xdc, 0x28, 0x51, 0xa0, 0x13, 0x39, 0x61, 0x65, 0xd2, 0xaa, 0x4b, 0xba,
	0x39, 0x00, 0x53, 0x84, 0xa7, 0xf3, 0xc3, 0x5f, 0xbb, 0x2d, 0x67, 0x35, 0x60, 0x81, 0x46, 0xcd,
	0x2a, 0x2b, 0xf8, 0x19, 0x5a, 0xa3, 0x6f, 0xab, 0xe3, 0x12, 0xc1, 0x4a, 0x20, 0x9d, 0x09, 0xc9,
	0xcd, 0x99, 0x14, 0x56, 0xf0, 0x9b, 0x87, 0x36, 0x0a, 0x99, 0xd8, 0xe2, 0x6f, 0x92, 0x8a, 0x23,
	0xdf, 0x98, 0xb7, 0x92, 0xca, 0x05, 0x06, 0x6e, 0xa3, 0x77, 0x8f, 0x8a, 0xa2, 0x33, 0x6d, 0x93,
	0x0b, 0x1b, 0xfb, 0x08, 0xd9, 0xed, 0xa3, 0x26, 0x53, 0xa0, 0x5b, 0x2b, 0x9d, 0x46, 0xb7, 0x49,
	0x2a, 0x27, 0xc1, 0x17, 0xae, 0x67, 0x02, 0x3a, 0x95, 0x42, 0x83, 0xed, 0x39, 0x01, 0x1e, 0x27,
	0xc6, 0xf5, 0xbc, 0x42, 0x0a, 0xcb, 0x9e, 0x9b, 0xfc, 0x4b, 0xaa, 0x13, 0xd7, 0xf0, 0x3a, 0x29,
	0xac, 0xe0, 0x47, 0x0f, 0x6d, 0x0e, 0x07, 0xa4, 0x1f, 0xf1, 0xc7, 0x62, 0x2c, 0x19, 0x30, 0xdc,
	0x42, 0x6b, 0x03, 0x29, 0x0c, 0xe4, 0x33, 0x88, 0x26, 0x29, 0x4d, 0xeb, 0x19, 0x2a, 0x3a, 0x9e,
	0x40, 0xb1, 0xe9, 0xa4, 0x34, 0x71, 0x1f, 0x35, 0x87, 0x91, 0x06, 0x75, 0x32, 0xfb, 0x0f, 0x2b,
	0xa4, 0xfe, 0xfe, 0xbc, 0xd4, 0x2b, 0x51, 0xe4, 0x4a, 0x4a, 0xf0, 0x01, 0xda, 0xa8, 0xd8, 0x18,
	0xa3, 0x15, 0xbb, 0x08, 0x45, 0x0b, 0xee, 0x3b, 0xf8, 0xdd, 0x43, 0x78, 0x38, 0x20, 0xe5, 0x7c,
	0x9e, 0x8a, 0x43, 0x23, 0x15, 0xe0, 0x4f, 0x2b, 0xec, 0xd9, 0xf0, 0xda, 0xc2, 0x95, 0xb9, 0x56,
	0xc8, 0xfd, 0x1a, 0xdd, 0x65, 0xa0, 0x41, 0x71, 0x3a, 0xe1, 0xdf, 0x03, 0x1b, 0x0e, 0x08, 0x81,
	0x54, 0x2a, 0xe3, 0xee, 0xb7, 0xb1, 0xbf, 0x5b, 0x73, 0x81, 0x2a, 0x57, 0xa4, 0x3e, 0xdb, 0x12,
	0x45, 0x64, 0x26, 0xac, 0x72, 0x1a, 0x6e, 0x0a, 0xa5, 0xb9, 0xff, 0xff, 0x32, 0x6a, 0x1c, 0xe8,
	0x18, 0x0b, 0xb4, 0x75, 0xe8, 0xc6, 0x5f, 0x36, 0x35, 0xca, 0xf1, 0x9b, 0xbb, 0x6e, 0xd7, 0xbb,
	0xcb, 0xc1, 0x07, 0xf7, 0x7f, 0xf8, 0xf3, 0x9f, 0x9f, 0x97, 0xef, 0xb5, 0xb7, 0xc3, 0xcb, 0x97,
	0xc3, 0xde, 0x33, 0xb4, 0xd4, 0xe1, 0x43, 0xb4, 0xd5, 0x67, 0xac, 0xf2, 0xcf, 0x38, 0xca, 0x71,
	0xa7, 0x16, 0xb0, 0x12, 0xb3, 0xa0, 0x24, 0x4e, 0xd0, 0xce, 0x0d, 0xef, 0xcf, 0x28, 0xc7, 0x1f,
	0x2d, 0x42, 0xaf, 0xc6, 0x2f, 0xaa, 0xf4, 0x18, 0xad, 0xf7, 0x19, 0xb3, 0x54, 0x8c, 0x72, 0xbc,
	0x73, 0x23, 0x4f, 0x0b, 0x60, 0x1e, 0x7e, 0xf5, 0xc7, 0x99, 0xef, 0xbd, 0x3c, 0xf3, 0xbd, 0xbf,
	0xcf, 0x7c, 0xef, 0xa7, 0x73, 0x7f, 0xe9, 0xe5, 0xb9, 0xbf, 0xf4, 0xd7, 0xb9, 0xbf, 0xf4, 0xcd,
	0x27, 0x95, 0xdd, 0x1d, 0x58, 0x88, 0x43, 0x7a, 0x04, 0x97, 0x4c, 0xee, 0x15, 0xfb, 0x9c, 0x57,
	0xc8, 0x75, 0x0b, 0x1d, 0xad, 0xba, 0xe7, 0xf8, 0xe3, 0xd7, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb3,
	0x7c, 0x71, 0xb9, 0x11, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SubmitFeedDataTx(ctx context.Context, in *MsgFeedData, opts ...grpc.CallOption) (*MsgResponse, error)
	AddModuleOwnerTx(ctx context.Context, in *MsgModuleOwner, opts ...grpc.CallOption) (*MsgResponse, error)
	ModuleOwnershipTransferTx(ctx context.Context, in *MsgModuleOwnershipTransfer, opts ...grpc.CallOption) (*MsgResponse, error)
	AddFeedTx(ctx context.Context, in *MsgFeed, opts ...grpc.CallOption) (*MsgResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitFeedDataTx(ctx context.Context, in *MsgFeedData, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/chainlink.v1beta.Msg/SubmitFeedDataTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddModuleOwnerTx(ctx context.Context, in *MsgModuleOwner, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/chainlink.v1beta.Msg/AddModuleOwnerTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ModuleOwnershipTransferTx(ctx context.Context, in *MsgModuleOwnershipTransfer, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/chainlink.v1beta.Msg/ModuleOwnershipTransferTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddFeedTx(ctx context.Context, in *MsgFeed, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/chainlink.v1beta.Msg/AddFeedTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SubmitFeedDataTx(context.Context, *MsgFeedData) (*MsgResponse, error)
	AddModuleOwnerTx(context.Context, *MsgModuleOwner) (*MsgResponse, error)
	ModuleOwnershipTransferTx(context.Context, *MsgModuleOwnershipTransfer) (*MsgResponse, error)
	AddFeedTx(context.Context, *MsgFeed) (*MsgResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitFeedDataTx(ctx context.Context, req *MsgFeedData) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFeedDataTx not implemented")
}
func (*UnimplementedMsgServer) AddModuleOwnerTx(ctx context.Context, req *MsgModuleOwner) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModuleOwnerTx not implemented")
}
func (*UnimplementedMsgServer) ModuleOwnershipTransferTx(ctx context.Context, req *MsgModuleOwnershipTransfer) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleOwnershipTransferTx not implemented")
}
func (*UnimplementedMsgServer) AddFeedTx(ctx context.Context, req *MsgFeed) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedTx not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitFeedDataTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFeedData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitFeedDataTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainlink.v1beta.Msg/SubmitFeedDataTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitFeedDataTx(ctx, req.(*MsgFeedData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddModuleOwnerTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModuleOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddModuleOwnerTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainlink.v1beta.Msg/AddModuleOwnerTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddModuleOwnerTx(ctx, req.(*MsgModuleOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ModuleOwnershipTransferTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModuleOwnershipTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ModuleOwnershipTransferTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainlink.v1beta.Msg/ModuleOwnershipTransferTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ModuleOwnershipTransferTx(ctx, req.(*MsgModuleOwnershipTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddFeedTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddFeedTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainlink.v1beta.Msg/AddFeedTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddFeedTx(ctx, req.(*MsgFeed))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chainlink.v1beta.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitFeedDataTx",
			Handler:    _Msg_SubmitFeedDataTx_Handler,
		},
		{
			MethodName: "AddModuleOwnerTx",
			Handler:    _Msg_AddModuleOwnerTx_Handler,
		},
		{
			MethodName: "ModuleOwnershipTransferTx",
			Handler:    _Msg_ModuleOwnershipTransferTx_Handler,
		},
		{
			MethodName: "AddFeedTx",
			Handler:    _Msg_AddFeedTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chainlink/v1beta/tx.proto",
}

func (m *MsgModuleOwnershipTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModuleOwnershipTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModuleOwnershipTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewModuleOwnerPubKey) > 0 {
		i -= len(m.NewModuleOwnerPubKey)
		copy(dAtA[i:], m.NewModuleOwnerPubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewModuleOwnerPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewModuleOwnerAddress) > 0 {
		i -= len(m.NewModuleOwnerAddress)
		copy(dAtA[i:], m.NewModuleOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewModuleOwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssignerAddress) > 0 {
		i -= len(m.AssignerAddress)
		copy(dAtA[i:], m.AssignerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssignerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModuleOwnerAddress) > 0 {
		i -= len(m.ModuleOwnerAddress)
		copy(dAtA[i:], m.ModuleOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleOwnerAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DeviationThresholdTrigger != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DeviationThresholdTrigger))
		i--
		dAtA[i] = 0x30
	}
	if m.HeartbeatTrigger != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.HeartbeatTrigger))
		i--
		dAtA[i] = 0x28
	}
	if m.SubmissionCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubmissionCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DataProviders) > 0 {
		for iNdEx := len(m.DataProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FeedOwner) > 0 {
		i -= len(m.FeedOwner)
		copy(dAtA[i:], m.FeedOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFeedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.FeedData) > 0 {
		i -= len(m.FeedData)
		copy(dAtA[i:], m.FeedData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OCRAbiEncoded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OCRAbiEncoded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OCRAbiEncoded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Observations) > 0 {
		for iNdEx := len(m.Observations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Observations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Oracles) > 0 {
		i -= len(m.Oracles)
		copy(dAtA[i:], m.Oracles)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Oracles)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Observation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Observation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Observation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OCRFeedDataInStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OCRFeedDataInStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OCRFeedDataInStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x18
	}
	if m.DeserializedOCRReport != nil {
		{
			size, err := m.DeserializedOCRReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FeedData != nil {
		{
			size, err := m.FeedData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgModuleOwnershipTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewModuleOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewModuleOwnerPubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DataProviders) > 0 {
		for _, e := range m.DataProviders {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SubmissionCount != 0 {
		n += 1 + sovTx(uint64(m.SubmissionCount))
	}
	if m.HeartbeatTrigger != 0 {
		n += 1 + sovTx(uint64(m.HeartbeatTrigger))
	}
	if m.DeviationThresholdTrigger != 0 {
		n += 1 + sovTx(uint64(m.DeviationThresholdTrigger))
	}
	l = len(m.ModuleOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *DataProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFeedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, b := range m.Signatures {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *OCRAbiEncoded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Oracles)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Observations) > 0 {
		for _, e := range m.Observations {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *Observation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *OCRFeedDataInStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeedData != nil {
		l = m.FeedData.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DeserializedOCRReport != nil {
		l = m.DeserializedOCRReport.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovTx(uint64(m.RoundId))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgModuleOwnershipTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModuleOwnershipTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModuleOwnershipTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignerAddress = append(m.AssignerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AssignerAddress == nil {
				m.AssignerAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewModuleOwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewModuleOwnerAddress = append(m.NewModuleOwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.NewModuleOwnerAddress == nil {
				m.NewModuleOwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewModuleOwnerPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewModuleOwnerPubKey = append(m.NewModuleOwnerPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NewModuleOwnerPubKey == nil {
				m.NewModuleOwnerPubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedOwner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedOwner = append(m.FeedOwner[:0], dAtA[iNdEx:postIndex]...)
			if m.FeedOwner == nil {
				m.FeedOwner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataProviders = append(m.DataProviders, &DataProvider{})
			if err := m.DataProviders[len(m.DataProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionCount", wireType)
			}
			m.SubmissionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmissionCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTrigger", wireType)
			}
			m.HeartbeatTrigger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatTrigger |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviationThresholdTrigger", wireType)
			}
			m.DeviationThresholdTrigger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviationThresholdTrigger |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleOwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleOwnerAddress = append(m.ModuleOwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ModuleOwnerAddress == nil {
				m.ModuleOwnerAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedData = append(m.FeedData[:0], dAtA[iNdEx:postIndex]...)
			if m.FeedData == nil {
				m.FeedData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, make([]byte, postIndex-iNdEx))
			copy(m.Signatures[len(m.Signatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OCRAbiEncoded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OCRAbiEncoded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OCRAbiEncoded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles[:0], dAtA[iNdEx:postIndex]...)
			if m.Oracles == nil {
				m.Oracles = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Observations = append(m.Observations, &Observation{})
			if err := m.Observations[len(m.Observations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Observation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Observation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Observation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OCRFeedDataInStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OCRFeedDataInStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OCRFeedDataInStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedData == nil {
				m.FeedData = &MsgFeedData{}
			}
			if err := m.FeedData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeserializedOCRReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeserializedOCRReport == nil {
				m.DeserializedOCRReport = &OCRAbiEncoded{}
			}
			if err := m.DeserializedOCRReport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
