// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chainlink/v1beta/event.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgNewFeedEvent struct {
	FeedId        string                                        `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	DataProviders []*DataProvider                               `protobuf:"bytes,2,rep,name=dataProviders,proto3" json:"dataProviders,omitempty"`
	FeedOwner     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=feedOwner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"feedOwner,omitempty"`
}

func (m *MsgNewFeedEvent) Reset()         { *m = MsgNewFeedEvent{} }
func (m *MsgNewFeedEvent) String() string { return proto.CompactTextString(m) }
func (*MsgNewFeedEvent) ProtoMessage()    {}
func (*MsgNewFeedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{0}
}
func (m *MsgNewFeedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewFeedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewFeedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewFeedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewFeedEvent.Merge(m, src)
}
func (m *MsgNewFeedEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewFeedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewFeedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewFeedEvent proto.InternalMessageInfo

func (m *MsgNewFeedEvent) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgNewFeedEvent) GetDataProviders() []*DataProvider {
	if m != nil {
		return m.DataProviders
	}
	return nil
}

func (m *MsgNewFeedEvent) GetFeedOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.FeedOwner
	}
	return nil
}

type MsgNewRoundDataEvent struct {
	FeedId   string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	RoundId  uint64 `protobuf:"varint,2,opt,name=roundId,proto3" json:"roundId,omitempty"`
	FeedData []byte `protobuf:"bytes,3,opt,name=feedData,proto3" json:"feedData,omitempty"`
}

func (m *MsgNewRoundDataEvent) Reset()         { *m = MsgNewRoundDataEvent{} }
func (m *MsgNewRoundDataEvent) String() string { return proto.CompactTextString(m) }
func (*MsgNewRoundDataEvent) ProtoMessage()    {}
func (*MsgNewRoundDataEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{1}
}
func (m *MsgNewRoundDataEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewRoundDataEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewRoundDataEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewRoundDataEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewRoundDataEvent.Merge(m, src)
}
func (m *MsgNewRoundDataEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewRoundDataEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewRoundDataEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewRoundDataEvent proto.InternalMessageInfo

func (m *MsgNewRoundDataEvent) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgNewRoundDataEvent) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *MsgNewRoundDataEvent) GetFeedData() []byte {
	if m != nil {
		return m.FeedData
	}
	return nil
}

type MsgNewRoundRequestEvent struct {
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
}

func (m *MsgNewRoundRequestEvent) Reset()         { *m = MsgNewRoundRequestEvent{} }
func (m *MsgNewRoundRequestEvent) String() string { return proto.CompactTextString(m) }
func (*MsgNewRoundRequestEvent) ProtoMessage()    {}
func (*MsgNewRoundRequestEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{2}
}
func (m *MsgNewRoundRequestEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewRoundRequestEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewRoundRequestEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewRoundRequestEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewRoundRequestEvent.Merge(m, src)
}
func (m *MsgNewRoundRequestEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewRoundRequestEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewRoundRequestEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewRoundRequestEvent proto.InternalMessageInfo

func (m *MsgNewRoundRequestEvent) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

type MsgOraclePaidEvent struct {
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// The account that was paid to
	Account github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=account,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"account,omitempty"`
	Value   uint64                                        `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgOraclePaidEvent) Reset()         { *m = MsgOraclePaidEvent{} }
func (m *MsgOraclePaidEvent) String() string { return proto.CompactTextString(m) }
func (*MsgOraclePaidEvent) ProtoMessage()    {}
func (*MsgOraclePaidEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{3}
}
func (m *MsgOraclePaidEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOraclePaidEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOraclePaidEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOraclePaidEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOraclePaidEvent.Merge(m, src)
}
func (m *MsgOraclePaidEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgOraclePaidEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOraclePaidEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOraclePaidEvent proto.InternalMessageInfo

func (m *MsgOraclePaidEvent) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgOraclePaidEvent) GetAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *MsgOraclePaidEvent) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MsgDataProviderSetChangeEvent struct {
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// changeType: either add or remove
	ChangeType       string                                        `protobuf:"bytes,2,opt,name=changeType,proto3" json:"changeType,omitempty"`
	DataProviderAddr github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=dataProviderAddr,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"dataProviderAddr,omitempty"`
	Signer           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgDataProviderSetChangeEvent) Reset()         { *m = MsgDataProviderSetChangeEvent{} }
func (m *MsgDataProviderSetChangeEvent) String() string { return proto.CompactTextString(m) }
func (*MsgDataProviderSetChangeEvent) ProtoMessage()    {}
func (*MsgDataProviderSetChangeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{4}
}
func (m *MsgDataProviderSetChangeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDataProviderSetChangeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDataProviderSetChangeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDataProviderSetChangeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDataProviderSetChangeEvent.Merge(m, src)
}
func (m *MsgDataProviderSetChangeEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgDataProviderSetChangeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDataProviderSetChangeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDataProviderSetChangeEvent proto.InternalMessageInfo

func (m *MsgDataProviderSetChangeEvent) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgDataProviderSetChangeEvent) GetChangeType() string {
	if m != nil {
		return m.ChangeType
	}
	return ""
}

func (m *MsgDataProviderSetChangeEvent) GetDataProviderAddr() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.DataProviderAddr
	}
	return nil
}

func (m *MsgDataProviderSetChangeEvent) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgFeedParameterChangeEvent struct {
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// changeType: either DeviationThreshold, heartbeatTrigger, submissionCount
	ChangeType        string                                        `protobuf:"bytes,2,opt,name=changeType,proto3" json:"changeType,omitempty"`
	NewParameterValue uint32                                        `protobuf:"varint,3,opt,name=newParameterValue,proto3" json:"newParameterValue,omitempty"`
	Signer            github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgFeedParameterChangeEvent) Reset()         { *m = MsgFeedParameterChangeEvent{} }
func (m *MsgFeedParameterChangeEvent) String() string { return proto.CompactTextString(m) }
func (*MsgFeedParameterChangeEvent) ProtoMessage()    {}
func (*MsgFeedParameterChangeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{5}
}
func (m *MsgFeedParameterChangeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeedParameterChangeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeedParameterChangeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeedParameterChangeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeedParameterChangeEvent.Merge(m, src)
}
func (m *MsgFeedParameterChangeEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeedParameterChangeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeedParameterChangeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeedParameterChangeEvent proto.InternalMessageInfo

func (m *MsgFeedParameterChangeEvent) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgFeedParameterChangeEvent) GetChangeType() string {
	if m != nil {
		return m.ChangeType
	}
	return ""
}

func (m *MsgFeedParameterChangeEvent) GetNewParameterValue() uint32 {
	if m != nil {
		return m.NewParameterValue
	}
	return 0
}

func (m *MsgFeedParameterChangeEvent) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgModuleOwnershipTransferEvent struct {
	NewModuleOwnerAddr github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=newModuleOwnerAddr,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"newModuleOwnerAddr,omitempty"`
	Signer             github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgModuleOwnershipTransferEvent) Reset()         { *m = MsgModuleOwnershipTransferEvent{} }
func (m *MsgModuleOwnershipTransferEvent) String() string { return proto.CompactTextString(m) }
func (*MsgModuleOwnershipTransferEvent) ProtoMessage()    {}
func (*MsgModuleOwnershipTransferEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{6}
}
func (m *MsgModuleOwnershipTransferEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModuleOwnershipTransferEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModuleOwnershipTransferEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModuleOwnershipTransferEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModuleOwnershipTransferEvent.Merge(m, src)
}
func (m *MsgModuleOwnershipTransferEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgModuleOwnershipTransferEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModuleOwnershipTransferEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModuleOwnershipTransferEvent proto.InternalMessageInfo

func (m *MsgModuleOwnershipTransferEvent) GetNewModuleOwnerAddr() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.NewModuleOwnerAddr
	}
	return nil
}

func (m *MsgModuleOwnershipTransferEvent) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgFeedOwnershipTransferEvent struct {
	FeedId           string                                        `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	NewFeedOwnerAddr github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=newFeedOwnerAddr,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"newFeedOwnerAddr,omitempty"`
	Signer           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgFeedOwnershipTransferEvent) Reset()         { *m = MsgFeedOwnershipTransferEvent{} }
func (m *MsgFeedOwnershipTransferEvent) String() string { return proto.CompactTextString(m) }
func (*MsgFeedOwnershipTransferEvent) ProtoMessage()    {}
func (*MsgFeedOwnershipTransferEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{7}
}
func (m *MsgFeedOwnershipTransferEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeedOwnershipTransferEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeedOwnershipTransferEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeedOwnershipTransferEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeedOwnershipTransferEvent.Merge(m, src)
}
func (m *MsgFeedOwnershipTransferEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeedOwnershipTransferEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeedOwnershipTransferEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeedOwnershipTransferEvent proto.InternalMessageInfo

func (m *MsgFeedOwnershipTransferEvent) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgFeedOwnershipTransferEvent) GetNewFeedOwnerAddr() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.NewFeedOwnerAddr
	}
	return nil
}

func (m *MsgFeedOwnershipTransferEvent) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgFeedDataValidationFailedEvent struct {
	FeedId    string                                        `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	FeedOwner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=feedOwner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"feedOwner,omitempty"`
	// DataProviders is the init list of data provider of the feed
	DataProviders []*DataProvider                               `protobuf:"bytes,3,rep,name=dataProviders,proto3" json:"dataProviders,omitempty"`
	Submitter     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=submitter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"submitter,omitempty"`
	// FeedData is the report for price feed, could be used for general feed data
	// From proposal: The reports generated by Chainlink nodes off-chain using the OCR protocol are ABI encoded byte arrays
	// which means each report is a byte array which could be deserialized to OCRAbiEncoded type
	FeedData []byte `protobuf:"bytes,5,opt,name=feedData,proto3" json:"feedData,omitempty"`
	// Signatures is the data provider signature list of the current round
	Signatures [][]byte `protobuf:"bytes,6,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *MsgFeedDataValidationFailedEvent) Reset()         { *m = MsgFeedDataValidationFailedEvent{} }
func (m *MsgFeedDataValidationFailedEvent) String() string { return proto.CompactTextString(m) }
func (*MsgFeedDataValidationFailedEvent) ProtoMessage()    {}
func (*MsgFeedDataValidationFailedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{8}
}
func (m *MsgFeedDataValidationFailedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeedDataValidationFailedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeedDataValidationFailedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeedDataValidationFailedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeedDataValidationFailedEvent.Merge(m, src)
}
func (m *MsgFeedDataValidationFailedEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeedDataValidationFailedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeedDataValidationFailedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeedDataValidationFailedEvent proto.InternalMessageInfo

func (m *MsgFeedDataValidationFailedEvent) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgFeedDataValidationFailedEvent) GetFeedOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.FeedOwner
	}
	return nil
}

func (m *MsgFeedDataValidationFailedEvent) GetDataProviders() []*DataProvider {
	if m != nil {
		return m.DataProviders
	}
	return nil
}

func (m *MsgFeedDataValidationFailedEvent) GetSubmitter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Submitter
	}
	return nil
}

func (m *MsgFeedDataValidationFailedEvent) GetFeedData() []byte {
	if m != nil {
		return m.FeedData
	}
	return nil
}

func (m *MsgFeedDataValidationFailedEvent) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type MsgFeedRewardSchemaChangeEvent struct {
	FeedId        string                                        `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	NewStrategy   string                                        `protobuf:"bytes,2,opt,name=newStrategy,proto3" json:"newStrategy,omitempty"`
	NewBaseAmount uint64                                        `protobuf:"varint,3,opt,name=newBaseAmount,proto3" json:"newBaseAmount,omitempty"`
	Signer        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgFeedRewardSchemaChangeEvent) Reset()         { *m = MsgFeedRewardSchemaChangeEvent{} }
func (m *MsgFeedRewardSchemaChangeEvent) String() string { return proto.CompactTextString(m) }
func (*MsgFeedRewardSchemaChangeEvent) ProtoMessage()    {}
func (*MsgFeedRewardSchemaChangeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_23aee62a42efb6bc, []int{9}
}
func (m *MsgFeedRewardSchemaChangeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeedRewardSchemaChangeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeedRewardSchemaChangeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeedRewardSchemaChangeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeedRewardSchemaChangeEvent.Merge(m, src)
}
func (m *MsgFeedRewardSchemaChangeEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeedRewardSchemaChangeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeedRewardSchemaChangeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeedRewardSchemaChangeEvent proto.InternalMessageInfo

func (m *MsgFeedRewardSchemaChangeEvent) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgFeedRewardSchemaChangeEvent) GetNewStrategy() string {
	if m != nil {
		return m.NewStrategy
	}
	return ""
}

func (m *MsgFeedRewardSchemaChangeEvent) GetNewBaseAmount() uint64 {
	if m != nil {
		return m.NewBaseAmount
	}
	return 0
}

func (m *MsgFeedRewardSchemaChangeEvent) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgNewFeedEvent)(nil), "chainlink.v1beta.MsgNewFeedEvent")
	proto.RegisterType((*MsgNewRoundDataEvent)(nil), "chainlink.v1beta.MsgNewRoundDataEvent")
	proto.RegisterType((*MsgNewRoundRequestEvent)(nil), "chainlink.v1beta.MsgNewRoundRequestEvent")
	proto.RegisterType((*MsgOraclePaidEvent)(nil), "chainlink.v1beta.MsgOraclePaidEvent")
	proto.RegisterType((*MsgDataProviderSetChangeEvent)(nil), "chainlink.v1beta.MsgDataProviderSetChangeEvent")
	proto.RegisterType((*MsgFeedParameterChangeEvent)(nil), "chainlink.v1beta.MsgFeedParameterChangeEvent")
	proto.RegisterType((*MsgModuleOwnershipTransferEvent)(nil), "chainlink.v1beta.MsgModuleOwnershipTransferEvent")
	proto.RegisterType((*MsgFeedOwnershipTransferEvent)(nil), "chainlink.v1beta.MsgFeedOwnershipTransferEvent")
	proto.RegisterType((*MsgFeedDataValidationFailedEvent)(nil), "chainlink.v1beta.MsgFeedDataValidationFailedEvent")
	proto.RegisterType((*MsgFeedRewardSchemaChangeEvent)(nil), "chainlink.v1beta.MsgFeedRewardSchemaChangeEvent")
}

func init() { proto.RegisterFile("chainlink/v1beta/event.proto", fileDescriptor_23aee62a42efb6bc) }

var fileDescriptor_23aee62a42efb6bc = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x4f, 0x13, 0x5d,
	0x14, 0xe6, 0xb6, 0x50, 0x5e, 0x0e, 0x90, 0x17, 0x27, 0x44, 0x2b, 0xea, 0x30, 0x99, 0xb8, 0xe8,
	0x42, 0xda, 0xa0, 0x0b, 0xd7, 0x7c, 0x48, 0x42, 0x4c, 0x05, 0xa7, 0x84, 0x85, 0x09, 0x8b, 0xdb,
	0xb9, 0x87, 0xe9, 0x84, 0xf6, 0x4e, 0xbd, 0xf7, 0x4e, 0x07, 0x96, 0xfe, 0x02, 0xfd, 0x49, 0x2e,
	0x4d, 0x4c, 0x94, 0xa5, 0x2b, 0xa2, 0xf0, 0x2f, 0x5c, 0x99, 0x3b, 0x33, 0xb4, 0x53, 0xab, 0x60,
	0xa6, 0x5d, 0xb5, 0xf7, 0x9c, 0xd3, 0xe7, 0x9c, 0xe7, 0x7c, 0x3c, 0x29, 0x3c, 0x74, 0x5b, 0xd4,
	0xe7, 0x6d, 0x9f, 0x9f, 0xd4, 0x7a, 0xeb, 0x4d, 0x54, 0xb4, 0x86, 0x3d, 0xe4, 0xaa, 0xda, 0x15,
	0x81, 0x0a, 0x8c, 0xa5, 0xbe, 0xb7, 0x9a, 0x78, 0x57, 0x96, 0xbd, 0xc0, 0x0b, 0x62, 0x67, 0x4d,
	0x7f, 0x4b, 0xe2, 0x56, 0xee, 0x8f, 0xa0, 0xa8, 0xd3, 0xc4, 0x65, 0x7f, 0x24, 0xf0, 0x7f, 0x5d,
	0x7a, 0xaf, 0x30, 0xda, 0x41, 0x64, 0x2f, 0x34, 0xb8, 0x71, 0x17, 0x4a, 0xc7, 0x88, 0x6c, 0x97,
	0x95, 0x89, 0x45, 0x2a, 0x73, 0x4e, 0xfa, 0x32, 0xb6, 0x61, 0x91, 0x51, 0x45, 0xf7, 0x45, 0xd0,
	0xf3, 0x19, 0x0a, 0x59, 0x2e, 0x58, 0xc5, 0xca, 0xfc, 0x53, 0xb3, 0xfa, 0x7b, 0x19, 0xd5, 0xed,
	0x4c, 0x98, 0x33, 0xfc, 0x23, 0x63, 0x0f, 0xe6, 0x34, 0xde, 0x5e, 0xc4, 0x51, 0x94, 0x8b, 0x16,
	0xa9, 0x2c, 0x6c, 0xae, 0xff, 0xbc, 0x58, 0x5d, 0xf3, 0x7c, 0xd5, 0x0a, 0x9b, 0x55, 0x37, 0xe8,
	0xd4, 0xdc, 0x40, 0x76, 0x02, 0x99, 0x7e, 0xac, 0x49, 0x76, 0x52, 0x53, 0x67, 0x5d, 0x94, 0xd5,
	0x0d, 0xd7, 0xdd, 0x60, 0x4c, 0xa0, 0x94, 0xce, 0x00, 0xc3, 0x66, 0xb0, 0x9c, 0x30, 0x70, 0x82,
	0x90, 0x33, 0x9d, 0xfa, 0x66, 0x1a, 0x65, 0x98, 0x15, 0x3a, 0x72, 0x97, 0x95, 0x0b, 0x16, 0xa9,
	0x4c, 0x3b, 0xd7, 0x4f, 0x63, 0x05, 0xfe, 0xd3, 0x31, 0x1a, 0x22, 0xa9, 0xcc, 0xe9, 0xbf, 0xed,
	0x75, 0xb8, 0x97, 0xc9, 0xe2, 0xe0, 0xdb, 0x10, 0xa5, 0xba, 0x31, 0x91, 0xfd, 0x9e, 0x80, 0x51,
	0x97, 0xde, 0x9e, 0xa0, 0x6e, 0x1b, 0xf7, 0xa9, 0x7f, 0x4b, 0x7b, 0x5f, 0xc2, 0x2c, 0x75, 0xdd,
	0x20, 0xe4, 0x2a, 0xae, 0x2b, 0x57, 0x5b, 0xae, 0x11, 0x8c, 0x65, 0x98, 0xe9, 0xd1, 0x76, 0x88,
	0x31, 0x8f, 0x69, 0x27, 0x79, 0xd8, 0xef, 0x0a, 0xf0, 0xa8, 0x2e, 0xbd, 0xec, 0x78, 0x1a, 0xa8,
	0xb6, 0x5a, 0x94, 0x7b, 0x78, 0x73, 0x71, 0x26, 0x80, 0x1b, 0x87, 0x1d, 0x9c, 0x75, 0x31, 0xae,
	0x6f, 0xce, 0xc9, 0x58, 0x8c, 0x23, 0x58, 0xca, 0x8e, 0x59, 0xd7, 0x93, 0x7f, 0xb8, 0x23, 0x50,
	0xc6, 0x2e, 0x94, 0xa4, 0xef, 0xe9, 0x8d, 0x99, 0xce, 0x0b, 0x9a, 0x02, 0xd8, 0x5f, 0x08, 0x3c,
	0xa8, 0x4b, 0x4f, 0xaf, 0xfb, 0x3e, 0x15, 0xb4, 0x83, 0x0a, 0xc5, 0x24, 0x3a, 0xf0, 0x04, 0xee,
	0x70, 0x8c, 0xfa, 0x90, 0x87, 0xfd, 0xee, 0x2f, 0x3a, 0xa3, 0x8e, 0x49, 0x12, 0xfa, 0x4a, 0x60,
	0xb5, 0x2e, 0xbd, 0x7a, 0xc0, 0xc2, 0x36, 0xc6, 0x27, 0x21, 0x5b, 0x7e, 0xf7, 0x40, 0x50, 0x2e,
	0x8f, 0x51, 0x24, 0xa4, 0x28, 0x18, 0x1c, 0xa3, 0x4c, 0x48, 0x3c, 0x20, 0x92, 0x37, 0xf5, 0x1f,
	0xc0, 0x26, 0xc9, 0xe8, 0x07, 0x89, 0xd7, 0x74, 0xe7, 0xfa, 0xc4, 0x47, 0xf9, 0xfc, 0x6d, 0x48,
	0x47, 0xb0, 0xc4, 0x13, 0x29, 0x1b, 0xb0, 0xcc, 0x7d, 0x4c, 0x23, 0x50, 0x19, 0x8e, 0xc5, 0x71,
	0x39, 0x5e, 0x14, 0xc0, 0x4a, 0x39, 0xea, 0x73, 0x3c, 0xa4, 0x6d, 0x9f, 0x51, 0xe5, 0x07, 0x7c,
	0x87, 0xfa, 0xed, 0xdb, 0x94, 0x78, 0x48, 0x43, 0x0b, 0xe3, 0x6b, 0xe8, 0xa8, 0xb4, 0x17, 0x73,
	0x4a, 0xbb, 0x0c, 0x9b, 0x1d, 0x5f, 0xa9, 0x71, 0xb6, 0x60, 0x80, 0x31, 0x24, 0xc8, 0x33, 0xc3,
	0x82, 0xac, 0xef, 0x51, 0xb7, 0x92, 0xaa, 0x50, 0xa0, 0x2c, 0x97, 0xac, 0x62, 0x65, 0xc1, 0xc9,
	0x58, 0xec, 0xcf, 0x04, 0xcc, 0xb4, 0xc1, 0x0e, 0x46, 0x54, 0xb0, 0x86, 0xdb, 0xc2, 0x0e, 0xfd,
	0x97, 0x53, 0xb7, 0x60, 0x9e, 0x63, 0xd4, 0x50, 0x82, 0x2a, 0xf4, 0xce, 0xd2, 0x5b, 0xcf, 0x9a,
	0x8c, 0xc7, 0xb0, 0xc8, 0x31, 0xda, 0xa4, 0x12, 0x37, 0x3a, 0xb1, 0x62, 0x27, 0x32, 0x3b, 0x6c,
	0x9c, 0xe0, 0x49, 0x6c, 0xbe, 0xfe, 0x74, 0x69, 0x92, 0xf3, 0x4b, 0x93, 0x7c, 0xbf, 0x34, 0xc9,
	0x87, 0x2b, 0x73, 0xea, 0xfc, 0xca, 0x9c, 0xfa, 0x76, 0x65, 0x4e, 0xbd, 0x79, 0x9e, 0x01, 0xdc,
	0xd2, 0xd3, 0x6a, 0xd0, 0x63, 0xac, 0xf5, 0xe7, 0xb6, 0x96, 0x26, 0x39, 0x1d, 0x98, 0x92, 0x2c,
	0xcd, 0x52, 0xfc, 0x0f, 0xe0, 0xd9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x58, 0x38, 0xfd,
	0x64, 0x08, 0x00, 0x00,
}

func (m *MsgNewFeedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewFeedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewFeedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedOwner) > 0 {
		i -= len(m.FeedOwner)
		copy(dAtA[i:], m.FeedOwner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataProviders) > 0 {
		for iNdEx := len(m.DataProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewRoundDataEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewRoundDataEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewRoundDataEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedData) > 0 {
		i -= len(m.FeedData)
		copy(dAtA[i:], m.FeedData)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RoundId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewRoundRequestEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewRoundRequestEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewRoundRequestEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOraclePaidEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOraclePaidEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOraclePaidEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDataProviderSetChangeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDataProviderSetChangeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDataProviderSetChangeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataProviderAddr) > 0 {
		i -= len(m.DataProviderAddr)
		copy(dAtA[i:], m.DataProviderAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DataProviderAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChangeType) > 0 {
		i -= len(m.ChangeType)
		copy(dAtA[i:], m.ChangeType)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChangeType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFeedParameterChangeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeedParameterChangeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeedParameterChangeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if m.NewParameterValue != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NewParameterValue))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChangeType) > 0 {
		i -= len(m.ChangeType)
		copy(dAtA[i:], m.ChangeType)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChangeType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgModuleOwnershipTransferEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModuleOwnershipTransferEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModuleOwnershipTransferEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewModuleOwnerAddr) > 0 {
		i -= len(m.NewModuleOwnerAddr)
		copy(dAtA[i:], m.NewModuleOwnerAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NewModuleOwnerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFeedOwnershipTransferEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeedOwnershipTransferEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeedOwnershipTransferEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewFeedOwnerAddr) > 0 {
		i -= len(m.NewFeedOwnerAddr)
		copy(dAtA[i:], m.NewFeedOwnerAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NewFeedOwnerAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFeedDataValidationFailedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeedDataValidationFailedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeedDataValidationFailedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintEvent(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FeedData) > 0 {
		i -= len(m.FeedData)
		copy(dAtA[i:], m.FeedData)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataProviders) > 0 {
		for iNdEx := len(m.DataProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FeedOwner) > 0 {
		i -= len(m.FeedOwner)
		copy(dAtA[i:], m.FeedOwner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFeedRewardSchemaChangeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeedRewardSchemaChangeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeedRewardSchemaChangeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if m.NewBaseAmount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NewBaseAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NewStrategy) > 0 {
		i -= len(m.NewStrategy)
		copy(dAtA[i:], m.NewStrategy)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NewStrategy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewFeedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.DataProviders) > 0 {
		for _, e := range m.DataProviders {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.FeedOwner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *MsgNewRoundDataEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovEvent(uint64(m.RoundId))
	}
	l = len(m.FeedData)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *MsgNewRoundRequestEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *MsgOraclePaidEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovEvent(uint64(m.Value))
	}
	return n
}

func (m *MsgDataProviderSetChangeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChangeType)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DataProviderAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *MsgFeedParameterChangeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChangeType)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NewParameterValue != 0 {
		n += 1 + sovEvent(uint64(m.NewParameterValue))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *MsgModuleOwnershipTransferEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewModuleOwnerAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *MsgFeedOwnershipTransferEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NewFeedOwnerAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *MsgFeedDataValidationFailedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.FeedOwner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.DataProviders) > 0 {
		for _, e := range m.DataProviders {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.FeedData)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, b := range m.Signatures {
			l = len(b)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *MsgFeedRewardSchemaChangeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NewStrategy)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NewBaseAmount != 0 {
		n += 1 + sovEvent(uint64(m.NewBaseAmount))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewFeedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewFeedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewFeedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataProviders = append(m.DataProviders, &DataProvider{})
			if err := m.DataProviders[len(m.DataProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedOwner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedOwner = append(m.FeedOwner[:0], dAtA[iNdEx:postIndex]...)
			if m.FeedOwner == nil {
				m.FeedOwner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewRoundDataEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewRoundDataEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewRoundDataEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedData = append(m.FeedData[:0], dAtA[iNdEx:postIndex]...)
			if m.FeedData == nil {
				m.FeedData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewRoundRequestEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewRoundRequestEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewRoundRequestEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOraclePaidEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOraclePaidEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOraclePaidEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDataProviderSetChangeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDataProviderSetChangeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDataProviderSetChangeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProviderAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataProviderAddr = append(m.DataProviderAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.DataProviderAddr == nil {
				m.DataProviderAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeedParameterChangeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeedParameterChangeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeedParameterChangeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewParameterValue", wireType)
			}
			m.NewParameterValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewParameterValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModuleOwnershipTransferEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModuleOwnershipTransferEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModuleOwnershipTransferEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewModuleOwnerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewModuleOwnerAddr = append(m.NewModuleOwnerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.NewModuleOwnerAddr == nil {
				m.NewModuleOwnerAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeedOwnershipTransferEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeedOwnershipTransferEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeedOwnershipTransferEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFeedOwnerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFeedOwnerAddr = append(m.NewFeedOwnerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.NewFeedOwnerAddr == nil {
				m.NewFeedOwnerAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeedDataValidationFailedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeedDataValidationFailedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeedDataValidationFailedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedOwner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedOwner = append(m.FeedOwner[:0], dAtA[iNdEx:postIndex]...)
			if m.FeedOwner == nil {
				m.FeedOwner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataProviders = append(m.DataProviders, &DataProvider{})
			if err := m.DataProviders[len(m.DataProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedData = append(m.FeedData[:0], dAtA[iNdEx:postIndex]...)
			if m.FeedData == nil {
				m.FeedData = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, make([]byte, postIndex-iNdEx))
			copy(m.Signatures[len(m.Signatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeedRewardSchemaChangeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeedRewardSchemaChangeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeedRewardSchemaChangeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStrategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBaseAmount", wireType)
			}
			m.NewBaseAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewBaseAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
