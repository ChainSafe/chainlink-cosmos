syntax = "proto3";
package chainlink.v1beta;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "chainlink/v1beta/genesis.proto";

option go_package = "github.com/ChainSafe/chainlink-cosmos/x/chainlink/types";

// Msg defines the Msg gPRC service.
service Msg {
  rpc SubmitFeedDataTx(MsgFeedData) returns (MsgResponse) {
    option (google.api.http).put = "/chainlink/feed/data";
  }
  rpc AddModuleOwnerTx(MsgModuleOwner) returns (MsgResponse);
  rpc ModuleOwnershipTransferTx(MsgModuleOwnershipTransfer) returns (MsgResponse);
  rpc AddFeedTx(MsgFeed) returns (MsgResponse);
  rpc AddDataProviderTx(MsgAddDataProvider) returns (MsgResponse);
  rpc RemoveDataProviderTx(MsgRemoveDataProvider) returns (MsgResponse);
  rpc SetSubmissionCountTx(MsgSetSubmissionCount) returns (MsgResponse);
  rpc SetHeartbeatTriggerTx(MsgSetHeartbeatTrigger) returns (MsgResponse);
  rpc SetDeviationThresholdTriggerTx(MsgSetDeviationThresholdTrigger) returns (MsgResponse);
  rpc SetFeedRewardTx(MsgSetFeedReward) returns (MsgResponse);
  rpc RequestNewRoundTx(MsgRequestNewRound) returns (MsgResponse);
  rpc FeedOwnershipTransferTx(MsgFeedOwnershipTransfer) returns (MsgResponse);
  rpc AddAccountTx(MsgAccount) returns (MsgResponse);
  rpc EditAccountTx(MsgEditAccount) returns (MsgResponse);
}

// MsgModuleOwnershipTransfer is the type defined for module ownership transfer
message MsgModuleOwnershipTransfer {
  // current module owner address
  bytes assignerAddress = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  bytes newModuleOwnerAddress = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  bytes newModuleOwnerPubKey = 3 [(gogoproto.moretags) = "yaml:\"pub_key\""];
}

// MsgFeed is the type defined for new feed
message MsgFeed {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // FeedOwner is the owner of the feed
  bytes feedOwner = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // DataProviders is the init list of data provider of the feed
  repeated DataProvider dataProviders = 3;
  // The number of signatures required for a feedData submission to be valid
  uint32 submissionCount = 4;
  // The interval between which a new round should automatically be triggered.
  // The given value in milliseconds will only be approximate within block intervals
  uint32 heartbeatTrigger = 5;
  // The fraction of deviation in the feed data required to trigger a new round.
  // For example if the price of ATOM/USD changes by 1% then a new round should occur
  // even if the heartbeat interval has not elapsed.
  uint32 deviationThresholdTrigger = 6;
  // Module owner who signs the add feed tx
  bytes moduleOwnerAddress = 7 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // feedReward struct describing how rewards should be paid
  FeedRewardSchema feedReward = 8;
  // Feed description
  string desc = 9;
}

message FeedRewardSchema {
  // amount is the base value that rewarded to each valid data provider before designated strategy applied
  // amount is not allowed to be zero
  uint32 amount = 1;
  // reward strategy name, must be a registered strategy
  // this is allowed to be empty, in which case every data provider will be rewarded the same amount token
  string strategy = 2;
}

// DataProvider is the type defined for feed data provider
message DataProvider {
  bytes address = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  bytes pubKey = 2;
}

// MsgAddProvider is the type defined for adding new data provider of the feed
message MsgAddDataProvider {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // DataProvider is the new data provider of the feed to add
  DataProvider dataProvider = 2;
  // Signer is the feed owner who signs the add feed provided tx
  bytes signer = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgRemoveProvider is the type defined for removing a data provider of the feed
message MsgRemoveDataProvider {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // Address of the data provider to remove from the feed
  bytes address = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // Signer is the feed owner who signs the remove feed provided tx
  bytes signer = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

message MsgSetSubmissionCount {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // The number of signatures required for a feedData submission to be valid
  uint32 submissionCount = 2;
  // Signer is the feed owner who signs the tx
  bytes signer = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

message MsgSetHeartbeatTrigger {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // The interval between which a new round should automatically be triggered.
  // The given value in milliseconds will only be approximate within block intervals
  uint32 heartbeatTrigger = 2;
  // Signer is the feed owner who signs the tx
  bytes signer = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

message MsgSetDeviationThresholdTrigger {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // The fraction of deviation in the feed data required to trigger a new round.
  // For example if the price of ATOM/USD changes by 1% then a new round should occur
  // even if the heartbeat interval has not elapsed.
  uint32 deviationThresholdTrigger = 2;
  // Signer is the feed owner who signs the tx
  bytes signer = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

message MsgSetFeedReward {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // The reward distributed to the data providers in a given feed.
  // The reward will be given as the native token in the application, denominated as "link"
  FeedRewardSchema feedReward = 2;
  // Signer is the feed owner who signs the tx
  bytes signer = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgFeedOwnershipTransfer is the type defined for feed ownership transfer
message MsgFeedOwnershipTransfer {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // NewFeedOwnerAddress is the address of the new owner of the feed
  bytes newFeedOwnerAddress = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // Signer is the feed owner who signs the tx
  bytes signer = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgFeedData is the type defined for the data of the feed
// It could be an OCR report feed, or any general feed data in the future
message MsgFeedData {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // Submitter is the leader of the current round who is calling the module to submit feed data
  bytes submitter = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // FeedData is the report for price feed, could be used for general feed data
  // From proposal: The reports generated by Chainlink nodes off-chain using the OCR protocol are ABI encoded byte arrays
  // which means each report is a byte array which could be deserialized to OCRAbiEncoded type
  bytes feedData = 3;
  // Signatures is the data provider signature list of the current round, signed by chainlink prikey. This is observation signatures
  repeated bytes signatures = 4;
  // isFeedDataValid is the indicator whether feed data is valid against the external validation func, it's true by default
  bool isFeedDataValid = 5;
  // cosmosPubKeys is the cosmos account pubkey slice of the data providers who signed this round
  repeated bytes cosmosPubKeys = 6;
  // TODO: we need to include chainlink pubKeys of the data providers who signed this round, and each observation data here to verify observation signatures in OCR go lib
}

// MsgRequestNewRound is the type defined for requesting new rounds to be triggered for a given feed
message MsgRequestNewRound {
  // FeedId is the unique identifier of the feed
  string feedId = 1;
  // Signer is the feed owner who signs the tx
  bytes signer = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgAccount is the type defined for account associated with the Chainlink node
message MsgAccount {
  // submitter - associated cosmos account address
  bytes submitter  = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // chainlinkPublicKey - public key of the associated Chainlink Oracle account
  bytes chainlinkPublicKey = 2;
  // chainlinkSigningKey - signing key of the associated Chainlink Oracle account
  bytes chainlinkSigningKey = 3;
  // piggyAddress - cosmos account address receivable for reward and fee distribution
  bytes piggyAddress  = 4 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgEditAccount is the type defined to edit a Chainlink account
message MsgEditAccount {
  // submitter - associated cosmos account address
  bytes submitter  = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // piggyAddress - cosmos account address receivable for reward and fee distribution
  bytes piggyAddress  = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

message MsgResponse {
  uint64 height = 1;
  string txHash = 2;
}

// this will be the implementation used later will use pseudo OCR ABI encoded data instead
// because the structure of how the OCR will be generalized is still unknown
// OCRAbiEncoded implments the OCR data that is ABCI encoded. The use and form will conform to the 
// Chainlink protocol specification.
message OCRAbiEncoded {
  // Context should be a 32-byte array struct.
  bytes Context = 1;
  // Oracles should be a 32-byte record of all participating oracles. Assuming this is data provider address?
  bytes Oracles = 2;
  // Observations should be an array on int192 containing the providers' independent observations.
  repeated Observation Observations = 3;
}

message Observation {
  bytes data = 1;
}

// OCRFeedDataInStore defines the type for OCR report that persists into the store
message OCRFeedDataInStore {
  MsgFeedData feedData = 1;
  OCRAbiEncoded deserializedOCRReport = 2;
  uint64 RoundId = 3;
}